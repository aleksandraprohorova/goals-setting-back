package com.example.accessingdatamysql.users;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import java.util.Optional;

@Controller	// This means that this class is a Controller
@RequestMapping(path="/users") // This means URL's start with /demo (after Application path)
public class UserController {
	@Autowired // This means to get the bean called userRepository
			   // Which is auto-generated by Spring, we will use it to handle the data
	private UserRepository userRepository;

	/*@PostMapping(path="/add") // Map ONLY POST Requests
	public @ResponseBody String addNewUser (@RequestParam String name
			, @RequestParam String email) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request

		User n = new User();
		n.setName(name);
		n.setEmail(email);
		userRepository.save(n);
		return "Saved";
	}*/
	@RequestMapping(method = RequestMethod.POST)
	public ResponseEntity<Object> add(@RequestBody User user) {
		userRepository.save(user);
		return new ResponseEntity<>("User is created successfully", HttpStatus.CREATED);
	}

	/*@RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
	public ResponseEntity<Object> delete(@PathVariable("id") String id) {

		Optional<User> tmp = userRepository.findById(Integer.valueOf(id));
		if (tmp.isPresent())
		{
			userRepository.delete(tmp.get());
			return new ResponseEntity<>("User is deleted successsfully", HttpStatus.OK);
		}
		else
		{
			return new ResponseEntity<>("User is not found", HttpStatus.NOT_FOUND);
		}
		
	}*/
	@RequestMapping(method = RequestMethod.DELETE)
	public ResponseEntity<Object> delete(@RequestBody Long id) {

		Optional<User> tmp = userRepository.findById(id);
		if (tmp.isPresent())
		{
			userRepository.delete(tmp.get());
			return new ResponseEntity<>("User is deleted successsfully", HttpStatus.OK);
		}
		else
		{
			return new ResponseEntity<>("User is not found", HttpStatus.NOT_FOUND);
		}

	}

	@RequestMapping(method = RequestMethod.GET)
	public @ResponseBody Iterable<User> getAllUsers() {
		// This returns a JSON or XML with the users
		return userRepository.findAll();
	}

	@RequestMapping(value = "/{login}", method = RequestMethod.GET)
	public @ResponseBody Optional<User> getUserByLogin(@PathVariable("login") String login){
		return userRepository.findByLogin(login);
	}
}
